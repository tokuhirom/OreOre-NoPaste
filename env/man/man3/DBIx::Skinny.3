.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Skinny 3"
.TH DBIx::Skinny 3 "2010-03-21" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Skinny \- simple DBI wrapper/ORMapper
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
create your db model base class.
.PP
.Vb 7
\&    package Your::Model;
\&    use DBIx::Skinny setup => {
\&        dsn => \*(Aqdbi:SQLite:\*(Aq,
\&        username => \*(Aq\*(Aq,
\&        password => \*(Aq\*(Aq,
\&    };
\&    1;
.Ve
.PP
create your db schema class.
See DBIx::Skinny::Schema for docs on defining schema class.
.PP
.Vb 2
\&    package Your::Model::Schema;
\&    use DBIx::Skinny::Schema;
\&    
\&    install_table user => schema {
\&        pk \*(Aqid\*(Aq;
\&        columns qw/
\&            id
\&            name
\&        /;
\&    };
\&    1;
.Ve
.PP
in your execute script.
.PP
.Vb 1
\&    use Your::Model;
\&    
\&    # insert new record.
\&    my $row = Your::Model\->insert(\*(Aquser\*(Aq,
\&        {
\&            id   => 1,
\&        }
\&    );
\&    $row\->update({name => \*(Aqnekokak\*(Aq});
\&
\&    $row = Your::Model\->search_by_sql(q{SELECT id, name FROM user WHERE id = ?}, [ 1 ]);
\&    $row\->delete(\*(Aquser\*(Aq)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DBIx::Skinny is simple \s-1DBI\s0 wrapper and simple O/R Mapper.
Lightweight and Little dependence \s-1ORM\s0.
The Row objects is generated based on arbitrarily \s-1SQL\s0.
.SH "METHOD"
.IX Header "METHOD"
.SS "new"
.IX Subsection "new"
Arguments: \f(CW$connection_info\fR
Return: DBIx::Skinny's instance object.
.PP
create your skinny instance.
It is possible to use it even by the class method.
.PP
\&\f(CW$connection_info\fR is optional argment.
.PP
When \f(CW$connection_info\fR is specified,
new method connect new \s-1DB\s0 connection from \f(CW$connection_info\fR.
.PP
When \f(CW$connection_info\fR is not specified,
it becomes use already setup connection or it doesn't do at all.
.PP
example:
.PP
.Vb 1
\&    my $db = Your::Model\->new;
.Ve
.PP
or
.PP
.Vb 7
\&    # connect new database connection.
\&    my $db = Your::Model\->new(+{
\&        dsn      => $dsn,
\&        username => $username,
\&        password => $password,
\&        connect_options => $connect_options,
\&    });
.Ve
.SS "insert"
.IX Subsection "insert"
Arguments: \f(CW$table_name\fR, \e%row_data
Return: DBIx::Skinny::Row's instance object.
.PP
insert new record and get inserted row object.
.PP
example:
.PP
.Vb 4
\&    my $row = Your::Model\->insert(\*(Aquser\*(Aq,{
\&        id   => 1,
\&        name => \*(Aqnekokak\*(Aq,
\&    });
.Ve
.PP
or
.PP
.Vb 5
\&    my $db = Your::Model\->new;
\&    my $row = $db\->insert(\*(Aquser\*(Aq,{
\&        id   => 1,
\&        name => \*(Aqnekokak\*(Aq,
\&    });
.Ve
.SS "create"
.IX Subsection "create"
insert method alias.
.SS "bulk_insert"
.IX Subsection "bulk_insert"
Arguments: \f(CW$table_name\fR, \e@row_datas
Return: true
.PP
Accepts either an arrayref of hashrefs.
each hashref should be a structure suitable
forsubmitting to a Your::Model\->insert(...) method.
.PP
insert many record by bulk.
.PP
example:
.PP
.Vb 10
\&    Your::Model\->bulk_insert(\*(Aquser\*(Aq,[
\&        {
\&            id   => 1,
\&            name => \*(Aqnekokak\*(Aq,
\&        },
\&        {
\&            id   => 2,
\&            name => \*(Aqyappo\*(Aq,
\&        },
\&        {
\&            id   => 3,
\&            name => \*(Aqwalf443\*(Aq,
\&        },
\&    ]);
.Ve
.SS "update"
.IX Subsection "update"
Arguments: \f(CW$table_name\fR, \e%update_row_data, \e%update_condition
Return: updated row count
.PP
\&\f(CW$update_condition\fR is optional argment.
.PP
update record.
.PP
example:
.PP
.Vb 3
\&    my $update_row_count = Your::Model\->update(\*(Aquser\*(Aq,{
\&        name => \*(Aqnomaneko\*(Aq,
\&    },{ id => 1 });
.Ve
.PP
or
.PP
.Vb 3
\&    # see) DBIx::Skinny::Row\*(Aqs POD
\&    my $row = Your::Model\->single(\*(Aquser\*(Aq,{id => 1});
\&    $row\->update({name => \*(Aqnomaneko\*(Aq});
.Ve
.SS "update_by_sql"
.IX Subsection "update_by_sql"
Arguments: \f(CW$sql\fR, \e@bind_values
Return: updated row count
.PP
update record by specific sql.
.PP
example:
    my \f(CW$update_row_count\fR = Your::Model\->update_by_sql(
        q{\s-1UPDATE\s0 user \s-1SET\s0 name = ?},
        ['nomaneko']
    );
.SS "delete"
.IX Subsection "delete"
Arguments: \f(CW$table\fR, \e%delete_where_condition
Return: updated row count
.PP
delete record.
.PP
example:
.PP
.Vb 3
\&    my $delete_row_count = Your::Model\->delete(\*(Aquser\*(Aq,{
\&        id => 1,
\&    });
.Ve
.PP
or
.PP
.Vb 3
\&    # see) DBIx::Skinny::Row\*(Aqs POD
\&    my $row = Your::Model\->single(\*(Aquser\*(Aq, {id => 1});
\&    $row\->delete
.Ve
.SS "delete_by_sql"
.IX Subsection "delete_by_sql"
Arguments: \f(CW$sql\fR, \e@bind_values
Return: updated row count
.PP
delete record by specific sql.
.PP
example:
.PP
.Vb 4
\&    my $delete_row_count = Your::Model\->delete_by_sql(
\&        q{DELETE FROM user WHERE id = ?},
\&        [1]
\&    });
.Ve
.SS "find_or_create"
.IX Subsection "find_or_create"
Arguments: \f(CW$table\fR, \e%values_and_search_condition
Return: DBIx::Skinny::Row's instance object.
.PP
create record if not exsists record.
.PP
example:
.PP
.Vb 4
\&    my $row = Your::Model\->find_or_create(\*(Aqusr\*(Aq,{
\&        id   => 1,
\&        name => \*(Aqnekokak\*(Aq,
\&    });
.Ve
.SS "find_or_insert"
.IX Subsection "find_or_insert"
find_or_create method alias.
.SS "search"
.IX Subsection "search"
Arguments: \f(CW$table\fR, \e%search_condition, \e%search_attr
Return: DBIx::Skinny::Iterator's instance object.
.PP
simple search method.
search method get DBIx::Skinny::Iterator's instance object.
.PP
see DBIx::Skinny::Iterator
.PP
get iterator:
.PP
.Vb 1
\&    my $itr = Your::Model\->search(\*(Aquser\*(Aq,{id => 1},{order_by => \*(Aqid\*(Aq});
.Ve
.PP
get rows:
.PP
.Vb 1
\&    my @rows = Your::Model\->search(\*(Aquser\*(Aq,{id => 1},{order_by => \*(Aqid\*(Aq});
.Ve
.PP
Please refer to DBIx::Skinny::Manual for the details of search method.
.SS "single"
.IX Subsection "single"
Arguments: \f(CW$table\fR, \e%search_condition
Return: DBIx::Skinny::Row's instance object.
.PP
get one record.
give back one case of the beginning when it is acquired plural records by single method.
.PP
.Vb 1
\&    my $row = Your::Model\->single(\*(Aquser\*(Aq,{id =>1});
.Ve
.SS "resultset"
.IX Subsection "resultset"
Arguments: \e%options
Return: DBIx::Skinny::SQL's instance object.
.PP
result set case:
.PP
.Vb 11
\&    my $rs = Your::Model\->resultset(
\&        {
\&            select => [qw/id name/],
\&            from   => [qw/user/],
\&        }
\&    );
\&    $rs\->add_where(\*(Aqname\*(Aq => {op => \*(Aqlike\*(Aq, value => "%neko%"});
\&    $rs\->limit(10);
\&    $rs\->offset(10);
\&    $rs\->order({ column => \*(Aqid\*(Aq, desc => \*(AqDESC\*(Aq });
\&    my $itr = $rs\->retrieve;
.Ve
.PP
Please refer to DBIx::Skinny::Manual for the details of resultset method.
.SS "count"
.IX Subsection "count"
get simple count
.PP
.Vb 1
\&    my $cnt = Your::Model\->count(\*(Aquser\*(Aq, \*(Aqid\*(Aq);
.Ve
.SS "search_named"
.IX Subsection "search_named"
execute named query
.PP
.Vb 1
\&    my $itr = Your::Model\->search_named(q{SELECT * FROM user WHERE id = :id}, {id => 1});
.Ve
.PP
If you give ArrayRef to value, that is expanded to \*(L"(?,?,?,?)\*(R" in \s-1SQL\s0.
It's useful in case use \s-1IN\s0 statement.
.PP
.Vb 1
\&    my $itr = Your::Model\->search_named(q{SELECT * FROM user WHERE id IN :ids}, {id => [1, 2, 3]});
.Ve
.SS "search_by_sql"
.IX Subsection "search_by_sql"
execute your \s-1SQL\s0
.PP
.Vb 8
\&    my $itr = Your::Model\->search_by_sql(q{
\&        SELECT
\&            id, name
\&        FROM
\&            user
\&        WHERE
\&            id = ?
\&    },[ 1 ]);
.Ve
.SS "txn_scope"
.IX Subsection "txn_scope"
get transaction scope object.
.PP
.Vb 5
\&    do {
\&        my $txn = Your::Model\->txn_scope;
\&        # some process
\&        $txn\->commit;
\&    }
.Ve
.SS "data2itr"
.IX Subsection "data2itr"
.Vb 10
\&    my $itr = Your::Model\->data2itr(\*(Aquser\*(Aq,[
\&        {
\&            id   => 1,
\&            name => \*(Aqnekokak\*(Aq,
\&        },
\&        {
\&            id   => 2,
\&            name => \*(Aqyappo\*(Aq,
\&        },
\&        {
\&            id   => 3,
\&            name => \*(Aqwalf43\*(Aq,
\&        },
\&    ]);
\&
\&    my $row = $itr\->first;
\&    $row\->insert; # inser data.
.Ve
.SS "find_or_new"
.IX Subsection "find_or_new"
.Vb 1
\&    my $row = Your::Model\->find_or_new(\*(Aquser\*(Aq,{name => \*(Aqnekokak\*(Aq});
.Ve
.SS "do"
.IX Subsection "do"
execute your query.
.SS "dbh"
.IX Subsection "dbh"
get database handle.
.SS "connect"
.IX Subsection "connect"
connect database handle.
.SS "reconnect"
.IX Subsection "reconnect"
re connect database handle.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
No bugs have been reported.
.SH "AUTHOR"
.IX Header "AUTHOR"
Atsushi Kobayashi  \f(CW\*(C`<nekokak _\|_at_\|_ gmail.com>\*(C'\fR
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
walf443 : Keiji Yoshimi
.PP
\&\s-1TBONE\s0 : Terrence Brannon
.PP
nekoya : Ryo Miyake
.PP
oinume: Kazuhiro Oinuma
.PP
fujiwara: Shunichiro Fujiwara
.PP
pjam: Tomoyuki Misonou
.PP
magicalhat
.PP
Makamaka Hannyaharamitu
.SH "SUPPORT"
.IX Header "SUPPORT"
.Vb 1
\&  irc: #dbix\-skinny@irc.perl.org
\&
\&  ML: http://groups.google.com/group/dbix\-skinny
.Ve
.SH "REPOSITORY"
.IX Header "REPOSITORY"
.Vb 1
\&  git clone git://github.com/nekokak/p5\-dbix\-skinny.git
.Ve
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2009, Atsushi Kobayashi \f(CW\*(C`<nekokak _\|_at_\|_ gmail.com>\*(C'\fR. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
