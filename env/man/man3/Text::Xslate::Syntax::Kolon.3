.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Text::Xslate::Syntax::Kolon 3"
.TH Text::Xslate::Syntax::Kolon 3 "2010-05-01" "perl v5.12.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::Xslate::Syntax::Kolon \- The default template syntax
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    use Text::Xslate;
\&    my $tx = Text::Xslate\->new(
\&        syntax => \*(AqKolon\*(Aq,                         # This is the default
\&        string => \*(AqHello, <: $dialect :> world!\*(Aq,
\&    );
\&
\&    print $tx\->render({ dialect => \*(AqKolon\*(Aq });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Kolon is the default syntax, using \f(CW\*(C`<: ... :>\*(C'\fR tags and \f(CW\*(C`: ...\*(C'\fR line code.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "Variable access"
.IX Subsection "Variable access"
.Vb 4
\&    <: $var :>
\&    <: $var.0 :>
\&    <: $var.field :>
\&    <: $var.accessor :>
\&
\&    <: $var["field"] :>
\&    <: $var[0] :>
.Ve
.PP
Variables may be \s-1HASH\s0 references, \s-1ARRAY\s0 references, or objects.
.SS "Loop for array references"
.IX Subsection "Loop for array references"
.Vb 3
\&    : for $data \->($item) {
\&        [<: $item.field :>]
\&    : }
.Ve
.SS "Conditional statements"
.IX Subsection "Conditional statements"
.Vb 9
\&    : if $var == nil {
\&        $var is nil.
\&    : }
\&    : else if $var != "foo" {
\&        $var is not nil nor "foo".
\&    : }
\&    : else {
\&        $var is "foo".
\&    : }
\&
\&    : if( $var >= 1 && $var <= 10 ) {
\&        $var is 1 .. 10
\&    : }
\&
\&    : $var.value == nil ? "nil" : $var.value
.Ve
.SS "Expressions"
.IX Subsection "Expressions"
Relational operators (\f(CW\*(C`== != < <= > >=\*(C'\fR):
.PP
.Vb 2
\&    : $var == 10 ? "10"     : "not 10"
\&    : $var != 10 ? "not 10" : "10"
.Ve
.PP
Arithmetic operators (\f(CW\*(C`+ \- * / %\*(C'\fR):
.PP
.Vb 2
\&    : $var * 10_000
\&    : ($var % 10) == 0
.Ve
.PP
Logical operators (\f(CW\*(C`|| && //\*(C'\fR)
.PP
.Vb 2
\&    : $var >= 0 && $var <= 10 ? "ok" : "too smaller or too larger"
\&    : $var // "foo" # as a default value
.Ve
.PP
String operators (\f(CW\*(C`~\*(C'\fR)
.PP
.Vb 1
\&    : "[" ~ $var ~ "]" # concatination
.Ve
.PP
Operator precedence:
.PP
.Vb 1
\&    (TODO)
.Ve
.SS "Functions and filters"
.IX Subsection "Functions and filters"
Once you have registered functions, you can call them with \f(CW\*(C`()\*(C'\fR or \f(CW\*(C`|\*(C'\fR.
.PP
.Vb 3
\&    : f()        # without args
\&    : f(1, 2, 3) # with args
\&    : 42 | f     # the same as f(42)
.Ve
.PP
Dynamic functions/filters:
.PP
.Vb 10
\&    # code
\&    sub mk_indent {
\&        my($prefix) = @_;
\&        return sub {
\&            my($str) = @_;
\&            $str =~ s/^/$prefix/xmsg;
\&            return $str;
\&        }
\&    }
\&    my $tx = Text::Xslate\->new(
\&        function => {
\&            indent => \e&mk_indent,
\&        },
\&    );
\&
\&    :# template
\&    : $value | indent("> ")
\&    : indent("> ")($value)
.Ve
.SS "Template inclusion"
.IX Subsection "Template inclusion"
.Vb 1
\&    : include "foo.tx"
.Ve
.PP
Xslate templates may be recursively included, but including depth is
limited to 100.
.SS "Template cascading"
.IX Subsection "Template cascading"
You can extend templates with block modifiers.
.PP
Base templates \fImytmpl/base.tx\fR:
.PP
.Vb 3
\&    : block title \-> { # with default
\&        [My Template!]
\&    : }
\&
\&    : block body \-> {;} # without default
.Ve
.PP
Another derived template \fImytmpl/foo.tx\fR:
.PP
.Vb 6
\&    : # cascade "mytmpl/base.tx" is also okey
\&    : cascade mytmpl::base
\&    : # use default title
\&    : around body \-> {
\&        My Template Body!
\&    : }
.Ve
.PP
Yet another derived template \fImytmpl/bar.tx\fR:
.PP
.Vb 12
\&    : cascade mytmpl::foo
\&    : around title \-> {
\&        \-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        : super
\&        \-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    : }
\&    : before body \-> {
\&        Before body!
\&    : }
\&    : after body \-> {
\&        After body!
\&    : }
.Ve
.PP
Then, Perl code:
.PP
.Vb 2
\&    my $tx = Text::Xslate\->new( file => \*(Aqmytmpl/bar.tx\*(Aq );
\&    $tx\->render({});
.Ve
.PP
Output:
.PP
.Vb 3
\&        \-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        [My Template!]
\&        \-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&        Before body!
\&        My Template Body!
\&        After Body!
.Ve
.PP
This is also called as \fBtemplate inheritance\fR.
.SS "Macro blocks"
.IX Subsection "Macro blocks"
.Vb 4
\&    : macro add \->($x, $y) {
\&    :   $x + $y;
\&    : }
\&    : add(10, 20)
\&
\&    : macro signeture \-> {
\&        This is foo version <: $VERSION :>
\&    : }
\&    : signeture()
.Ve
.PP
Note that return values of macros are values that their routines renders.
That is, macros themselves output nothing.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Text::Xslate
