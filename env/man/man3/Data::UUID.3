.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "UUID 3"
.TH UUID 3 "2009-11-04" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::UUID \- Perl extension for generating Globally/Universally 
Unique Identifiers (GUIDs/UUIDs).
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Data::UUID;
\&  
\&  $ug    = new Data::UUID;
\&  $uuid1 = $ug\->create();
\&  $uuid2 = $ug\->create_from_name(<namespace>, <name>);
\&
\&  $res   = $ug\->compare($uuid1, $uuid2);
\&
\&  $str   = $ug\->to_string( $uuid );
\&  $uuid  = $ug\->from_string( $str );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a framework for generating UUIDs (Universally Unique
Identifiers, also known as GUIDs (Globally Unique Identifiers). A \s-1UUID\s0 is 128
bits long, and is guaranteed to be different from all other UUIDs/GUIDs
generated until 3400 \s-1CE\s0.
.PP
UUIDs were originally used in the Network Computing System (\s-1NCS\s0) and later in
the Open Software Foundation's (\s-1OSF\s0) Distributed Computing Environment.
Currently many different technologies rely on UUIDs to provide unique identity
for various software components. Microsoft \s-1COM/DCOM\s0 for instance, uses GUIDs
very extensively to uniquely identify classes, applications and components
across network-connected systems.
.PP
The algorithm for \s-1UUID\s0 generation, used by this extension, is described in the
Internet Draft \*(L"UUIDs and GUIDs\*(R" by Paul J. Leach and Rich Salz.  (See \s-1RFC\s0
4122.)  It provides reasonably efficient and reliable framework for generating
UUIDs and supports fairly high allocation rates \*(-- 10 million per second per
machine \*(-- and therefore is suitable for identifying both extremely short-lived
and very persistent objects on a given system as well as across the network.
.PP
This modules provides several methods to create a \s-1UUID:\s0
.PP
.Vb 3
\&   # creates binary (16 byte long binary value) UUID.
\&   $ug\->create();
\&   $ug\->create_bin();
\&
\&   # creates binary (16\-byte long binary value) UUID based on particular
\&   # namespace and name string.
\&   $ug\->create_from_name(<namespace>, <name>);
\&   $ug\->create_from_name_bin(<namespace>, <name>);
\&
\&   # creates UUID string, using conventional UUID string format,
\&   # such as: 4162F712\-1DD2\-11B2\-B17E\-C09EFE1DC403
\&   $ug\->create_str();
\&   $ug\->create_from_name_str(<namespace>, <name>);
\&
\&   # creates UUID string as a hex string,
\&   # such as: 0x4162F7121DD211B2B17EC09EFE1DC403
\&   $ug\->create_hex();
\&   $ug\->create_from_name_hex(<namespace>, <name>);
\&
\&   # creates UUID string as a Base64\-encoded string
\&   $ug\->create_b64();
\&   $ug\->create_from_name_b64(<namespace>, <name>);
\&
\&   Binary UUIDs can be converted to printable strings using following methods:
\&
\&   # convert to conventional string representation
\&   $ug\->to_string(<uuid>);
\&
\&   # convert to hex string
\&   $ug\->to_hexstring(<uuid>);
\&
\&   # convert to Base64\-encoded string
\&   $ug\->to_b64string(<uuid>);
\&
\&   Conversly, string UUIDs can be converted back to binary form:
\&
\&   # recreate binary UUID from string
\&   $ug\->from_string(<uuid>);
\&   $ug\->from_hexstring(<uuid>);
\&
\&   # recreate binary UUID from Base64\-encoded string
\&   $ug\->from_b64string(<uuid>);
\&
\&   Finally, two binary UUIDs can be compared using the following method:
\&
\&   # returns \-1, 0 or 1 depending on whether uuid1 less
\&   # than, equals to, or greater than uuid2
\&   $ug\->compare(<uuid1>, <uuid2>);
.Ve
.PP
Examples:
.PP
.Vb 1
\&   use Data::UUID qw(:all);
\&
\&   # this creates a new UUID in string form, based on the standard namespace
\&   # UUID NameSpace_URL and name "www.mycompany.com"
\&
\&   $ug = new Data::UUID;
\&   print $ug\->create_from_name_str(NameSpace_URL, "www.mycompany.com");
.Ve
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
The module allows exporting of several standard namespace UUIDs:
.IP "NameSpace_DNS" 4
.IX Item "NameSpace_DNS"
.PD 0
.IP "NameSpace_URL" 4
.IX Item "NameSpace_URL"
.IP "NameSpace_OID" 4
.IX Item "NameSpace_OID"
.IP "NameSpace_X500" 4
.IX Item "NameSpace_X500"
.PD
.SH "AUTHOR"
.IX Header "AUTHOR"
Alexander Golomshtok <agolomsh@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The Internet Draft \*(L"UUIDs and GUIDs\*(R" by Paul J. Leach and Rich Salz (\s-1RFC\s0 4122)
.PP
\&\*(L"Primary Key Reengineering Projects: The Problem\*(R" by Tom Johnston
<http://www.dmreview.com/editorial/dmreview/print_action.cfm?EdID=1866>
.PP
\&\*(L"Primary Key Reengineering Projects: The Solution\*(R" by Tom Johnston
<http://www.dmreview.com/editorial/dmreview/print_action.cfm?EdID=2004>
