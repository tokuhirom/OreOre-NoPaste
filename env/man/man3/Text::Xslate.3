.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Text::Xslate 3"
.TH Text::Xslate 3 "2010-05-01" "perl v5.12.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::Xslate \- High performance template engine
.SH "VERSION"
.IX Header "VERSION"
This document describes Text::Xslate version 0.1006.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Text::Xslate;
\&    use FindBin qw($Bin);
\&
\&    my %vars = (
\&        title => \*(AqA list of books\*(Aq,
\&        books => [
\&            { title => \*(AqIslands in the stream\*(Aq },
\&            { title => \*(AqProgramming Perl\*(Aq      },
\&            { title => \*(AqRiver out of Eden\*(Aq     },
\&            { title => \*(AqBeautiful code\*(Aq        },
\&        ],
\&    );
\&
\&    # for files
\&    my $tx = Text::Xslate\->new();
\&    print $tx\->render_file(\*(Aqhello.tx\*(Aq, \e%vars);
\&
\&    # for strings
\&    my $template = q{
\&        <h1><: $title :></h1>
\&        <ul>
\&        : for $books \->($book) {
\&            <li><: $book.title :></li>
\&        : } # for
\&        </ul>
\&    };
\&
\&    $tx = Text::Xslate\->new(
\&        string => $template,
\&    );
\&
\&    print $tx\->render(\e%vars);
\&
\&    # you can tell the engine that some strings are already escaped.
\&    use Text::Xslate qw(escaped_string);
\&
\&    $vars{email} = escaped_string(\*(Aqgfx &lt;gfuji at cpan.org&gt;\*(Aq);
\&    # or
\&    $vars{email} = Text::Xslate::EscapedString\->new(
\&        \*(Aqgfx &lt;gfuji at cpan.org&gt;\*(Aq,
\&    ); # if you don\*(Aqt want to pollute your namespace.
\&
\&
\&    # if you want Template\-Toolkit syntx:
\&    $tx = Text::Xslate\->new(syntax => \*(AqTTerse\*(Aq);
\&    # ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBText::Xslate\fR is a template engine tuned for persistent applications.
This engine introduces the virtual machine paradigm. That is, templates are
compiled into xslate opcodes, and then executed by the xslate virtual machine
just like as Perl does.
.PP
\&\fBThis software is under development\fR.
Version 0.1xxx is a developing stage, which may include radical changes.
Version 0.2xxx and more will be somewhat stable.
.SS "Features"
.IX Subsection "Features"
\fIHigh performance\fR
.IX Subsection "High performance"
.PP
Xslate has an virtual machine written in \s-1XS\s0, which is highly optimized.
According to benchmarks, Xslate is \fB2\-10\fR times faster than other template
engines (Template-Toolkit, HTML::Template::Pro, Text::MicroTemplate, etc).
.PP
\fITemplate cascading\fR
.IX Subsection "Template cascading"
.PP
Xslate supports template cascading, which allows one to extend
templates with block modifiers.
.PP
This mechanism is also called as template inheritance.
.PP
\fISyntax alternation\fR
.IX Subsection "Syntax alternation"
.PP
The Xslate engine and parser/compiler are completely separated so that
one can use alternative parsers.
.PP
Currently, \f(CW\*(C`TTerse\*(C'\fR, a Template-Toolkit-like parser, is supported as an
alternative.
.SH "INTERFACE"
.IX Header "INTERFACE"
.SS "Methods"
.IX Subsection "Methods"
\fI\f(BIText::Xslate\->new(%options) \-> Xslate\fI\fR
.IX Subsection "Text::Xslate->new(%options) -> Xslate"
.PP
Creates a new xslate template engine.
.PP
Possible options ares:
.ie n .IP """string => $template_string""" 4
.el .IP "\f(CWstring => $template_string\fR" 4
.IX Item "string => $template_string"
Specifies the template string, which is called \f(CW\*(C`<input>\*(C'\fR internally.
.ie n .IP """file => $template_file | \e@template_files""" 4
.el .IP "\f(CWfile => $template_file | \e@template_files\fR" 4
.IX Item "file => $template_file | @template_files"
Specifies file(s) to be preloaded. Note that \f(CW\*(C`render()\*(C'\fR loads files
automatically, so this option is not necessarily required.
.ie n .IP """path => \e@path // ["".""]""" 4
.el .IP "\f(CWpath => \e@path // [``.'']\fR" 4
.IX Item "path => @path // ["".""]"
Specifies the include paths. Default to \f(CW\*(C`<["."]\*(C'\fR>.
.ie n .IP """function => \e%functions""" 4
.el .IP "\f(CWfunction => \e%functions\fR" 4
.IX Item "function => %functions"
Specifies functions.
.Sp
Functions may be called as \f(CW\*(C`f($arg)\*(C'\fR or \f(CW\*(C`$arg | f\*(C'\fR.
.ie n .IP """cache => $level // 1""" 4
.el .IP "\f(CWcache => $level // 1\fR" 4
.IX Item "cache => $level // 1"
Sets the cache level.
.Sp
If \fI\f(CI$level\fI\fR == 1 (default), Xslate caches compiled templates on the disk, and
checks the freshness of the original templates every time.
.Sp
If \fI\f(CI$level\fI\fR >= 2, caches will be created but the freshness
will not be checked.
.Sp
\&\fI\f(CI$level\fI\fR == 0 creates no caches. It's only for testing.
.ie n .IP """input_layer => $perliolayers // "":utf8""""" 4
.el .IP "\f(CWinput_layer => $perliolayers // ``:utf8''\fR" 4
.IX Item "input_layer => $perliolayers // "":utf8"""
Specifies PerlIO layers for reading templates.
.ie n .IP """syntax => $moniker""" 4
.el .IP "\f(CWsyntax => $moniker\fR" 4
.IX Item "syntax => $moniker"
Specifies the template syntax.
.Sp
If \fI\f(CI$moniker\fI\fR is undefined, the default parser will be used.
.PP
\fI\f(BI\f(CB$tx\f(BI\->render($file, \e%vars) \-> Str\fI\fR
.IX Subsection "$tx->render($file, %vars) -> Str"
.PP
Renders a template with variables, and returns the result.
.PP
If \fI\f(CI$file\fI\fR is omitted, \f(CW\*(C`<input>\*(C'\fR is used. See the \f(CW\*(C`string\*(C'\fR option for \f(CW\*(C`new\*(C'\fR.
.PP
Note that \fI\f(CI$file\fI\fR may be cached according to the cache level.
.PP
\fIExportable functions\fR
.IX Subsection "Exportable functions"
.PP
\fI\f(CI\*(C`escaped_string($str :Str) \-> EscapedString\*(C'\fI\fR
.IX Subsection "escaped_string($str :Str) -> EscapedString"
.PP
Mark \fI\f(CI$str\fI\fR as escaped. Escaped strings will not be escaped by the engine,
so you have to escape these strings.
.PP
For example:
.PP
.Vb 8
\&    my $tx = Text::Xslate\->new(
\&        string => \*(AqMailaddress: <: $email :>\*(Aq,
\&    );
\&    my %vars = (
\&        email => "Foo &lt;foo@example.com&gt;",
\&    );
\&    print $tx\->render(\e%email);
\&    # => Mailaddress: Foo &lt;foo@example.com&gt;
.Ve
.SH "TEMPLATE SYNTAX"
.IX Header "TEMPLATE SYNTAX"
There are syntaxes you can use:
.IP "Kolon" 4
.IX Item "Kolon"
\&\fBKolon\fR is the default syntax, using \f(CW\*(C`<: ... :>\*(C'\fR tags and
\&\f(CW\*(C`: ...\*(C'\fR line code, which is explained in Text::Xslate::Syntax::Kolon.
.IP "Metakolon" 4
.IX Item "Metakolon"
\&\fBMetakolon\fR is the same as Kolon except for using \f(CW\*(C`[% ... %]\*(C'\fR tags and
\&\f(CW\*(C`% ...\*(C'\fR line code, instead of \f(CW\*(C`<: ... :>\*(C'\fR and \f(CW\*(C`: ...\*(C'\fR.
.IP "TTerse" 4
.IX Item "TTerse"
\&\fBTTerse\fR is a syntax that is a subset of Template-Toolkit 2, called \fBTTerse\fR,
which is explained in Text::Xslate::Syntax::TTerse.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Perl 5.10.0 or later, and a C compiler.
.SH "BUGS"
.IX Header "BUGS"
All complex software has bugs lurking in it, and this module is no
exception. If you find a bug please either email me, or add the bug
to cpan-RT.  Patches are welcome :)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Xslate template syntaxes:
.PP
Text::Xslate::Syntax::Kolon
.PP
Text::Xslate::Syntax::Metakolon
.PP
Text::Xslate::Syntax::TTerse
.PP
Other template modules:
.PP
Text::MicroTemplate
.PP
Text::MicroTemplate::Extended
.PP
Text::ClearSilver
.PP
Template-Toolkit
.PP
HTML::Template
.PP
HTML::Template::Pro
.PP
Benchmarks:
.PP
Template::Benchmark
.SH "AUTHOR"
.IX Header "AUTHOR"
Fuji, Goro (gfx) <gfuji(at)cpan.org>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2010, Fuji, Goro (gfx). All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
