.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Skinny::Manual::JA::Intro 3"
.TH DBIx::Skinny::Manual::JA::Intro 3 "2010-03-21" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Skinny::Manual::JA::Intro \- DBIx::SkinnyXXXXXXXXXX
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SkinnyXXXXXXXXXXXXXXXXXXXXX
.PP
Please translate and read the person in the sphere in English.
.SH "XX"
.IX Header "XX"
XXSkinnyXMySQLXSQLiteXPostgreSQLXOracleXXXXXXXXXXX
.PP
\&\s-1XXDBDXXXXXXXXX\s0
DBIx::Skinny::DBD::*XXXXXXXXXXXXXXXX
.PP
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.SS "SkinnyXXXXXXXXX"
.IX Subsection "SkinnyXXXXXXXXX"
SkinnyXXXXXClassXXXXXXX
.PP
XXXProjXXXXXXXXXXSkinnyXXXXX
.PP
.Vb 7
\&    package Proj::Model;
\&    use DBIx::Skinny setup => +{
\&        dsn => \*(Aqdbi:SQLite:\*(Aq,
\&        username => \*(Aq\*(Aq,
\&        password => \*(Aq\*(Aq,
\&    };
\&    1;
.Ve
.PP
XXXXXClassXXXXXXX
XXXXXDBIx::SkinnyXuseXXX
.PP
use strict;
.PP
use warnings;
.PP
\&\s-1XXXXXXXXXXXXXX\s0
.PP
DBIx::SkinnyXuseXXXXXXXdsnXXDBXXXXXXXXXXXXXXXXXXX
.PP
\&.pmXXXXXXXdsnXXXXXXXXXXXX
.PP
.Vb 3
\&    package Proj::Model;
\&    use DBIx::Skinny;
\&    1;
.Ve
.PP
DBIx::SkinnyXuseXXXXXXXdsnXXXXXXXClassXXXXXXXX
\&\s-1DBXXXXXXXXXX\s0
.PP
.Vb 1
\&    Proj::Model\->connect_info(....); # connect_infoXXXXX
.Ve
.PP
\&\s-1XXXX\s0
.PP
.Vb 1
\&    Proj::Model\->connect(....): # connectXXXXXdsnXXXXXXXXXXXX
.Ve
.PP
\&\s-1XXXX\s0
.PP
.Vb 1
\&    my $model = Proj::Model\->new($connection_info); # XXXXXXXXXXXXXXXXXXXXXXXX
.Ve
.PP
\&\s-1XXXXXXXXXXX\s0
.PP
XXXXdbXhandlerXXXXXXXXXXXXXXXXXXXXXXX
.PP
.Vb 1
\&    Proj::Model\->set_dbh($dbh);
.Ve
.PP
XXXXXset_dbhXhandlerXXXXXXXXXXXXXXXdatabase handlerXXXXXXXXXXXXX
.SS "\s-1XXXXXXXXXX\s0"
.IX Subsection "XXXXXXXXXX"
SkinnyXXXXORXXXXXXXXXXXtableXXXXXschemaXXXXXXXXXXXXXX
.PP
XXXuserXXXXXXXXX
.PP
.Vb 2
\&    package Proj::Model::Schema;
\&    use DBIx::Skinny::Schema;
\&    
\&    install_table \*(Aquser\*(Aq => schema {
\&        pk \*(Aqid\*(Aq;
\&        columns qw/
\&            id guid login_id login_pw name mail created_at updated_at
\&        /;
\&    };
\&    1;
.Ve
.PP
DBIx::Skinny::SchemaXuseXXXSchemaXXXXXXXXXXXmethodXexportXXXXX
.PP
XXXXXDBIx::Skinny::SchemaXXuseXXX
.PP
use strict;
.PP
use warnings;
.PP
\&\s-1XXXXXXXXXXXXXX\s0
.PP
XXXXXuserXXXXX
XXXXXXXXid
XXXXXXid/guid/login_id/login_pw/name/mail/created_at/updated_at
\&\s-1XXXXXXXXXXXXX\s0
.PP
SkinnyXXXXORXXXXXXXXXXXXXXXClassXXXXXXXXXXXX
.PP
XXXXXXProj::Model::SchemaXXXXXXXXXXXXXXXXX
.PP
\fI\s-1XXXXXXXXXXXXXXXXXX\s0\fR
.IX Subsection "XXXXXXXXXXXXXXXXXX"
.PP
XXuserXXXXXXXnameXXXXXXXXXXXXXXXXXXXXutf8flagXXXXXXXXXXXXXX
.PP
.Vb 2
\&    package Proj::Model::Schema;
\&    use DBIx::Skinny::Schema;
\&    
\&    install_utf8_columns qw/name/;
\&    install_table \*(Aquser\*(Aq => schema {
\&        pk \*(Aqid\*(Aq;
\&        columns qw/
\&            id guid login_id login_pw name mail created_at updated_at
\&        /;
\&    };
\&    1;
.Ve
.PP
XXXXXinstall_utf8_columnsXXXXXXXXXXXXXXXXX
.PP
XXXXXXXXXXXXXXSkinnyXXXXXXXXXXXXXXXX
.PP
SkinnyXXXXXXXXXXXXXXXXXXXXXXXSQLXXXXXX
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXX\s0
\&\s-1XXXXXXXXXXXXXXXXX\s0
.PP
XXXXXXXinstall_utf8_columnsXXXXXXXXXXXXXXXXXXX
XXXXXSkinnyXXXXXXXXXXXXXXXXXXXXXXX
.PP
XXXXuserXXXXXXXXXXXXnameXXXXXXXXXX
install_utf8_columnsXnameXXXXXXXXuserXXXXXXXXXXXXnameXXXXutf8flagXXXXXXXXXXXX
.PP
\fIinflate/deflateXXXXXXX\fR
.IX Subsection "inflate/deflateXXXXXXX"
.PP
SkinnyXXinflate/deflateXXXXXXXXXXXX
.PP
userXXXXXXXXXXcreated_at/updated_atXXXXXDateTimeXinflate/deflateXXXXXX
.PP
.Vb 6
\&    package Proj::Model::Schema;
\&    use DBIx::Skinny::Schema;
\&    use DateTime;
\&    use DateTime::Format::Strptime;
\&    use DateTime::Format::MySQL;
\&    use DateTime::TimeZone;
\&    
\&    my $timezone = DateTime::TimeZone\->new(name => \*(AqAsia/Tokyo\*(Aq);
\&    install_inflate_rule \*(Aq^.+_at$\*(Aq => callback {
\&        inflate {
\&            my $value = shift;
\&            my $dt = DateTime::Format::Strptime\->new(
\&                pattern   => \*(Aq%Y\-%m\-%d %H:%M:%S\*(Aq,
\&                time_zone => $timezone,
\&            )\->parse_datetime($value);
\&            return DateTime\->from_object( object => $dt );
\&        };
\&        deflate {
\&            my $value = shift;
\&            return DateTime::Format::MySQL\->format_datetime($value);
\&        };
\&    };
\&    
\&    install_table \*(Aquser\*(Aq => schema {
\&        pk \*(Aqid\*(Aq;
\&        columns qw/
\&            id guid login_id login_pw name mail created_at updated_at
\&        /;
\&    };
\&    1;
.Ve
.PP
\&\s-1XXXXXXXXXXXXX\s0
.PP
install_inflate_ruleXXXXXXXXXXXXXXXXXXX
\&\s-1XXXXXXXXXXXXXXXXX\s0
.PP
install_inflate_ruleXinstall_utf8_columnsXXXSkinnyXXXXXXXXXXXXXXXXX
.PP
\fItriggerXXXX\fR
.IX Subsection "triggerXXXX"
.PP
SkinnyXXinsert/update/deleteXXXXXXXXXtriggerXXXHookXXXXXXXXXXX
.PP
XXXinsertXXcreated_atXXXXXXXXtriggerXXXXXXXX
.PP
.Vb 3
\&    package Proj::Model::Schema;
\&    use DBIx::Skinny::Schema;
\&    use DateTime;
\&    
\&    install_table \*(Aquser\*(Aq => schema {
\&        pk \*(Aqid\*(Aq;
\&        columns qw/
\&            id guid login_id login_pw name mail created_at updated_at
\&        /;
\&        trigger pre_insert => sub {
\&            my ( $class, $args ) = @_;
\&            $args\->{created_at} ||= DateTime\->now;
\&        };
\&    };
\&    1;
.Ve
.PP
\&\s-1XXXXXXXXXXXX\s0
.PP
\&\s-1XXXXXXXXXXXXXXXXX\s0
.PP
pre_insert / post_insert / pre_update / post_update / pre_delete / post_delete
.PP
\&\s-1XXXXX\s0
.PP
\&\s-1XXXXXXXXXXXXXXXXXXXXXX\s0
.PP
XXXXXXXXXHookXXXXXXXXXXXXXXXXXXXXX
XXHookXXXXXXXXXXXXXXXXXXXXXXXXXXXX
.SS "new"
.IX Subsection "new"
SkinnyXXXXXXXXXXXXXXXXXXDBXXXXXXXXXXXXXXXXXXXX
.PP
\&\s-1XXXXXXXXXXDBXXXXXXX\s0
.PP
.Vb 2
\&    my $model = Proj::Model\->new;
\&    $model\->do();
.Ve
.PP
\&\s-1XXXXXXXXXXXDBXXXXXXX\s0
.PP
.Vb 1
\&    Proj::Model\->do()
.Ve
.PP
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXX\s0
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.PP
\&\s-1WEBXXXXXXXXDBXXXXXXXXXXXXXXXXXXXXXXXXX\s0
\&\s-1XXXXXXXXXXDBXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.SS "connection_info / connect /reconnect / set_dbh"
.IX Subsection "connection_info / connect /reconnect / set_dbh"
\fIconnection_info\fR
.IX Subsection "connection_info"
.PP
connect_infoXXXXXXDBXXXXXXXXXX
.PP
.Vb 10
\&    Proj::Model\->connection_info({
\&        dsn      => \*(Aqdbi:mysql:test\*(Aq,
\&        username => \*(Aqusername\*(Aq,
\&        password => \*(Aqpassword\*(Aq
\&        connect_options => +{
\&            RaiseError => 1,
\&            PrintError => 0,
\&            AutoCommit => 1,
\&        },
\&    });
.Ve
.PP
connection_infoXXXXXXXXXXXXXXDBXXXXXXXXXXXX
.PP
XXXXXXXXXXconnect_optionsXXXXXXXXXXXX
\&\s-1XXXX\s0
.PP
RaiseError: 1
.PP
PrintError: 0
.PP
AutoCommit: 1
.PP
\&\s-1XDBXXXXXXXX\s0
.PP
\fIconnect\fR
.IX Subsection "connect"
.PP
XXXXDBXXXXXXXXXXconnectXXXXXXXXXXX
.PP
.Vb 10
\&    Proj::Model\->connect({
\&        dsn      => \*(Aqdbi:mysql:test\*(Aq,
\&        username => \*(Aqusername\*(Aq,
\&        password => \*(Aqpassword\*(Aq
\&        connect_options => +{
\&            RaiseError => 1,
\&            PrintError => 0,
\&            AutoCommit => 1,
\&        },
\&    });
.Ve
.PP
\fIreconnect\fR
.IX Subsection "reconnect"
.PP
\&\s-1XXDBXXXXXXXXXXXDBXXXXXXXXXXXX\s0
reconnectXXXXXXXXXXX
.PP
.Vb 10
\&    Proj::Model\->reconnect({
\&        dsn      => \*(Aqdbi:mysql:test\*(Aq,
\&        username => \*(Aqusername\*(Aq,
\&        password => \*(Aqpassword\*(Aq
\&        connect_options => +{
\&            RaiseError => 1,
\&            PrintError => 0,
\&            AutoCommit => 1,
\&        },
\&    });
.Ve
.PP
reconnectXXXXXXXXXXXXXXXXXXXXXXXdatabase handlerXXXXXXXX
.PP
\fIset_dbh\fR
.IX Subsection "set_dbh"
.PP
XXdatabase handlerXXXXXXXXXXSkinnyXXXhandlerXXXXXXXX
set_dbhXXXXXXXXXXX
.PP
.Vb 1
\&    Proj::Model\->set_dbh($dbh);
.Ve
.PP
set_dbhXXXXXXXXXXXXXXXXXXXXXXXdatabase handlerXXXXXXXX
.SS "dbh"
.IX Subsection "dbh"
dbhXXXXXXXXXXXXXXXXdatabase handlerXXXXXXXX
.PP
.Vb 1
\&    my $dbh = Proj::Model\->dbh;
.Ve
.SS "do"
.IX Subsection "do"
doXXXXX$dbh\->doXXXXXXXXXXXXXXXX
.PP
.Vb 6
\&    Proj::Model\->do(q{
\&        CREATE TABLE foo (
\&            id   INT,
\&            name TEXT
\&        )
\&    });
.Ve
.SS "insert / create"
.IX Subsection "insert / create"
userXXXXXXXXXXinsertXXXXXXXXXXXXXX
.PP
.Vb 4
\&    my $row = Proj::Model\->insert(\*(Aquser\*(Aq,{
\&        name => \*(Aqnekokak\*(Aq,
\&        mail => \*(Aqnekokak _at_ gmail.com\*(Aq,
\&    });
.Ve
.PP
insertXXXXXXXXXSkinnyXRowXXXXXXXXXXXX
.PP
.Vb 2
\&    print $row\->name; # nekokak
\&    print $row\->mail; # nekokak _at_ gmail.com
.Ve
.PP
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.PP
XXXcreateXXXXXinsertXXXXXXXXXXXXXXXXXXXXXXXOKXX
.PP
.Vb 4
\&    my $row = Proj::Model\->create(\*(Aquser\*(Aq,{
\&        name => \*(Aqnekokak\*(Aq,
\&        mail => \*(Aqnekokak _at_ gmail.com\*(Aq,
\&    });
.Ve
.SS "update"
.IX Subsection "update"
userXXXXXXXXXXupdateXXXXXXXXXXXXXX
.PP
.Vb 1
\&    Proj::Model\->update(\*(Aquser\*(Aq, {name => \*(Aqyappo\*(Aq}, {id => 1})
.Ve
.PP
XXXXhashrefXXXXXXXX
XXXXhashrefXXXXXXXXXXXXXXXXXX
.PP
XXXRowXXXXXXXupdateXXXXXXXXXXXX
.PP
.Vb 5
\&    my $row = Proj::Model\->insert(\*(Aquser\*(Aq,{
\&        name => \*(Aqnekokak\*(Aq,
\&        mail => \*(Aqnekokak _at_ gmail.com\*(Aq,
\&    });
\&    $row\->update({name => \*(Aqyappo\*(Aq});
.Ve
.SS "delete"
.IX Subsection "delete"
userXXXXXXXXXXdeleteXXXXXXXXXXXXX
.PP
.Vb 1
\&    Proj::Model\->delete(\*(Aquser\*(Aq, {id => 1});
.Ve
.PP
hashrefXdeleteXXXXXXXXXXXXXXXXXXXX
.PP
XXdeleteXXXXXupdateXXXXXXXXRowXXXXXXXdeleteXXXXXXXXXXXX
.PP
.Vb 5
\&    my $row = Proj::Model\->insert(\*(Aquser\*(Aq,{
\&        name => \*(Aqnekokak\*(Aq,
\&        mail => \*(Aqnekokak _at_ gmail.com\*(Aq,
\&    });
\&    $row\->delete;
.Ve
.SS "bulk_insert"
.IX Subsection "bulk_insert"
userXXXXXXXXXXXinsertXXXXXXXXXXXXXXXXXX
.PP
.Vb 12
\&    Proj::Model\->bulk_insert(\*(Aquser\*(Aq,
\&        [
\&            {
\&                name => \*(Aqnekokak\*(Aq,
\&                mail => \*(Aqnekokak _at_ gmail.com\*(Aq,
\&            },
\&            {
\&                name => \*(Aqyappo\*(Aq,
\&                mail => \*(Aqyappo _at_ example.com\*(Aq,
\&            },
\&        ]
\&    );
.Ve
.PP
bulk_insertXXXXinsertXXXXXXXXXXXXXXXXXXXXXXX
.SS "find_or_create / find_or_insert"
.IX Subsection "find_or_create / find_or_insert"
userXXXXXXXXXXXXXXXXXXXXXXXXXXselectX
XXXXXXXXXXXXinsertXXXXXXXXXXX
.PP
.Vb 4
\&    my $row = Proj::Model\->find_or_create(\*(Aquser\*(Aq,{
\&        name => \*(Aqnekokak\*(Aq,
\&        mail => \*(Aqnekokak _at_ gmail.com\*(Aq,
\&    });
.Ve
.PP
XXXfind_or_insertXXXXXfind_or_createXXXXXXXXXXXXXXXXXXXXXXXOKXX
.PP
.Vb 4
\&    my $row = Proj::Model\->find_or_insert(\*(Aquser\*(Aq,{
\&        name => \*(Aqnekokak\*(Aq,
\&        mail => \*(Aqnekokak _at_ gmail.com\*(Aq,
\&    });
.Ve
.SS "single / search / search_named /search_by_sql / count"
.IX Subsection "single / search / search_named /search_by_sql / count"
\fIsingle\fR
.IX Subsection "single"
.PP
userXXXXXXXXXXXXXXXXXXXXXX
.PP
.Vb 1
\&    my $row = Proj::Model\->single(\*(Aquser\*(Aq,{name => \*(Aqnekokak\*(Aq});
.Ve
.PP
\fIsearch\fR
.IX Subsection "search"
.PP
userXXXXXXXXselectXXXXXXXXXXXsearchXXXXXXXXXXX
.PP
.Vb 6
\&    my $itr = Proj::Model\->search(\*(Aquser\*(Aq,
\&        {
\&            name => \*(Aqnekokak\*(Aq,
\&        },
\&        { }
\&    );
.Ve
.PP
XXXXhashrefXXXXX
XXXXhashrefXorderXlimitXXXXXXXXXXXXXX
.PP
searchXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
\&\s-1XXXXXXXXXXXX\s0
XXXXXXXXXXXXXXXXXDBIx::Skinny::IteratorXXXXXX
XXXXXXXXXXXXXXXXXXRowXXXXXXXXXXXXXXXX
.PP
XXXXXXXXXXXXXXDBIx::Class::Manual::JA::ResultsetXXXXXXXXXXX
.PP
\fIsearch_named\fR
.IX Subsection "search_named"
.PP
selectXXXXXXXXXXXnamedXXXXXXXXXXXXX
\&\s-1SQLXXXXXXXXXXXXXX\s0
.PP
.Vb 1
\&    my $itr = Proj::Model\->search_named(q{SELECT * FROM user WHERE id > :id}, {id => 1});
.Ve
.PP
\&\s-1XXXXXXXXXXXXXXX\s0
XXXXXXXXXXXXXXXXXXXXHashrefXXXXXXX
\&\s-1XXXXXX\s0':id'XXXXXXXXHashrefXidXvalueXXX1XXXXXXXXXX
.PP
XXX%sXXXXXXXSQLXXXXXXXXXXXXX
.PP
.Vb 1
\&    my $itr = Proj::Model\->search_named(q{SELECT * FROM user WHERE id > :id LIMIT %s}, {id => 1}, [10]);
.Ve
.PP
LIMITXXXXBindXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXarrayrefXXXXXXXXXX
.PP
.Vb 1
\&    my $itr = Proj::Model\->search_named(q{SELECT * FROM user WHERE id > :id LIMIT %s}, {id => 1}, [10], \*(Aquser\*(Aq);
.Ve
.PP
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
\&\s-1XXXXXXXXXXXXXXX\s0
.PP
\fIsearch_by_sql\fR
.IX Subsection "search_by_sql"
.PP
selectXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
.PP
.Vb 1
\&    my $itr = Proj::Model\->search_by_sql(q{SELECT * FROM user WHERE id = ?}, [1], \*(Aquser\*(Aq);
.Ve
.PP
\&\s-1XXXXXXXXXXXXXXX\s0
XXXXXXXXXXXXXXXXXXXXbindXX
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.PP
\fIcount\fR
.IX Subsection "count"
.PP
userXXXXXcountXXXXXXXXcountXXXXXXXXXXX
.PP
.Vb 1
\&    my $count = Porj::Model\->count(\*(Aquser\*(Aq , \*(Aqid\*(Aq, {name => \*(Aqnekokak\*(Aq});
.Ve
.PP
XXXXXXXcountXXXXXXXXXXXXXX
XXXXXXXcountXXXXXXXXXXX
.SS "resultset"
.IX Subsection "resultset"
DBIx::Skinny::Manual::JA::ResultsetXXXXXXXXXX
.SS "\s-1XXXXXXXX\s0"
.IX Subsection "XXXXXXXX"
SkinnyXXXXXXXXXXXXXXXXXXXXXXXXXXXX
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.PP
.Vb 1
\&    my $txn = Porj::Model\->txn_scope;
\&    
\&    my $row = Proj::Model\->single(\*(Aquser\*(Aq, {id => 1});
\&    $row\->set({name => \*(Aqnekokak\*(Aq});
\&    $row\->update;
\&    
\&    $txn\->commit;
.Ve
.PP
SkinnyXXXXXXXXXXXXXXtxn_scopeXXXXXXXXXXXXXXXXXXXXX
\&\s-1XXXXXXXXXXXXXXXX\s0
\&\f(CW$txn\fR\->commitXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
\&\f(CW$txn\fR\->commitXXXXXXX$txnXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXrollbackXXXXX
.PP
txn_scopeXXXXXXXXX
.PP
.Vb 1
\&    Proj::Model\->txn_begin;
\&    
\&    my $row = Proj::Model\->single(\*(Aquser\*(Aq, {id => 1});
\&    $row\->set({name => \*(Aqnekokak\*(Aq});
\&    $row\->update;
\&    
\&    Proj::Model\->txn_commit;
\&    Proj::Model\->txn_end;
.Ve
.PP
\&\s-1XXXXXXXXXXXXXXXXXXXXXXX\s0
.PP
\&\s-1XXXXXXXXXXXXXXXXXXXXXRDBMSXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
MySQLXXXXXXXXInnoDBXXXXXXXXX
.SS "\s-1XXXXXXX\s0(Mixin)"
.IX Subsection "XXXXXXX(Mixin)"
DBIx::Skinny::MixinXXXXXXXXXXXX
Proj::ModelXXXXXXXXXXXXXXXXXXX
.PP
\&\s-1XXX\s0
.PP
.Vb 4
\&    package Proj::Model;
\&    use DBIx::Skinny;
\&    use DBIx::Skinny::Mixin modules => [\*(Aq+Mixin::Foo\*(Aq];
\&    1;
\&    
\&    package Mixin::Foo;
\&    sub register_method {
\&        +{
\&            foo => sub { \*(Aqfoo\*(Aq },
\&        };
\&    }
.Ve
.PP
XXXXXMixin::FooXXXXXXregister_methodXXXXXXX
Proj::ModelXXXXXXexportXXXXX
.PP
XXXXXXfooXXXXXXXXexportXXXXX
.PP
.Vb 1
\&    Proj::Model\->foo;
.Ve
.PP
\&\s-1XXXXXXXXXXXXXX\s0
.SS "RowXXXXXXXXXXXXXX"
.IX Subsection "RowXXXXXXXXXXXXXX"
Proj::Model::Row::{Table}XXXXXXXXXXXXXXXX
SkinnyXIteratorXXXXXXRowXXXXX
XXXXXXXXXXXProj::Model::Row::{Table}XXXXXXXXXX
.PP
TableXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXSQLXDigest::SHA1XXXXXXXXXXXXXANONXXXXXXXXXXXXX
.PP
TableXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
.PP
.Vb 9
\&    package Proj::Model::Row::User;
\&    use strict;
\&    use warnings;
\&    use utf8;
\&    use base \*(AqDBIx::Skinny::Row\*(Aq;
\&    sub foo {
\&        say \*(Aqfoo\*(Aq;
\&    }
\&    1;
.Ve
.PP
fooXXXXXXXXXXXXX
.PP
.Vb 1
\&    $row\->foo;
.Ve
.PP
\&\s-1XXXXXXXXXXXX\s0
.PP
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.PP
XXXXUser has_many BlogXXX
.PP
.Vb 6
\&    package Proj::Model::Row::User;
\&    use base \*(AqDBIx::Skinny::Row\*(Aq;
\&    sub blogs {
\&        my $self = shift;
\&        $self\->{skinny}\->search(\*(Aqblog\*(Aq,{user_id => $self\->id});
\&    }
.Ve
.PP
\&\s-1XXXXXXXXXXXX\s0
.PP
.Vb 1
\&    $user\->blogs;
.Ve
.PP
\&\s-1XXXXXXXXXXXXXXXXXXX\s0
