.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Skinny::Manual::JA::Resultset 3"
.TH DBIx::Skinny::Manual::JA::Resultset 3 "2010-03-21" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Skinny::Manual::JA::Resultset \- DBIx::SkinnyXresultsetXXXX
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
XXXSQLXXXXXXresultsetXXXXXXXXXXXXXXXXXX
.PP
Please translate and read the person in the sphere in English.
.SH "resultsetXXXXXXX"
.IX Header "resultsetXXXXXXX"
\&\s-1CGIXXXXXXXXXXXXXXXXXXXXX\s0
\&\s-1XXXXXXXXXXSQLXXXXXXXXXXXXXXXXXXX\s0
.PP
XXXXXresultsetXXXXXXXXXXSQLXXXXXXXXXXXXXXXXXX
.PP
XXXXXresultsetXXXXXXXXXXXXX
.PP
.Vb 1
\&    my $rs = Proj::Model\->resultset;
.Ve
.PP
resultsetXXXXXXXselectXXXXXXXXXXXXXXXX
.PP
.Vb 1
\&    $rs\->add_select(\*(Aquser.id\*(Aq => \*(Aquser_id\*(Aq);
.Ve
.PP
\&\s-1XXXXXXXSELECTXXXXXXXXXXXXXXXXXXX\s0
\&\s-1XXXXXXXASXXXXXXXXXXXXXX\s0
.PP
\&\s-1XXXXX\s0
.PP
.Vb 2
\&    SELECT user.id
\&    FROM
.Ve
.PP
\&\s-1XXXXXX\s0
.PP
resultsetXSQLXXXXXXXXXXXXXSQLXXXXXXXXXXXXXXXXXXXXXX
.PP
.Vb 1
\&    warn $rs\->as_sql;
.Ve
.PP
\&\s-1XXXXXXXXXXXXXXXSQLXXXXXXXXXXXXXXX\s0
.PP
XXselectXXXXXXXXXXXX
.PP
.Vb 1
\&    $rs\->from([\*(Aquser\*(Aq]);
\&
\&    SELECT user.id
\&    FROM user
.Ve
.PP
XXXarrayrefXXXXXXXXXXXXXX
.PP
.Vb 1
\&    $rs\->from([\*(Aquser\*(Aq, \*(Aqhoge\*(Aq]);
\&
\&    SELECT user.id
\&    FROM user, hoge
.Ve
.PP
XXwhereXXXXXXXXXX
whereXXXXXXXXadd_whereXXXXXXXXXXX
.PP
.Vb 1
\&    user.name = ?
\&    
\&    # bind = nekokak
.Ve
.PP
XwhereXXXXXXXXXXXXXXXXXXX
.PP
.Vb 1
\&    $rs\->add_where(\*(Aquser.name\*(Aq => \*(Aqnekokak\*(Aq);
\&
\&    SELECT user.id
\&    FROM user
\&    WHERE (user.name = ?)
.Ve
.PP
bindXXXXXXXXXXXXXbindXXXXXXXXXXX
.PP
.Vb 2
\&    use Data::Dumper;
\&    warn Dumper $rs\->bind;
\&
\&    $VAR1 = [
\&            \*(Aqnekokak\*(Aq
\&            ];
.Ve
.PP
XXXXXSQLXXXXXXXretrieveXXXXXXXXXXX
retrieveXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
.PP
.Vb 1
\&    my $itr = $rs\->retrieve;
.Ve
.PP
\&\s-1XXXXXXXXXXXXXXXXXX\s0
.PP
resultsetXXXXXXXXXXXXfromXselectXXXXXXXXXXXXXXX
resultsetXXXXXXXXXXXXXXXXXXX
.PP
.Vb 9
\&    my $rs = Proj::Model\->resultset(
\&        {
\&            select => [
\&                         \*(Aquser.name\*(Aq,
\&                         \*(Aquser.id AS user_id\*(Aq,
\&                      ],
\&            from   => [\*(Aquser\*(Aq],
\&        }
\&    );
.Ve
.PP
resultsetXXXXXXXXXXXselectXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
selectXXXXXXXXXXXXXXXXXXXXXXXXXXX
.SH "XXXSQLXXXXXX"
.IX Header "XXXSQLXXXXXX"
SkinnyXXXXXXXXXSQLXXXXXXXXXXXXXX
.PP
XXXwhereXXXXXX
.PP
\&\s-1IN/NOT\s0 \s-1INXXXXX\s0
.PP
.Vb 2
\&    $rs\->add_where(\*(Aquser.id\*(Aq => {\*(AqIN\*(Aq => \e@user_ids});
\&    $rs\->add_where(\*(Aquser.id\*(Aq => {\*(AqNOT IN\*(Aq => \e@user_ids});
.Ve
.PP
\&\s-1INXXXXXXXXXXXXXXXXXXXX\s0
.PP
.Vb 1
\&    $rs\->add_where(\*(Aquser.id\*(Aq => \e@user_ids);
.Ve
.PP
\&\s-1XXXXXXXXXX\s0
.PP
.Vb 3
\&    $rs\->add_where(\*(Aquser.id\*(Aq => {\*(Aq<\*(Aq => 1});
\&    $rs\->add_where(\*(Aquser.id\*(Aq => {\*(Aq>\*(Aq => 1});
\&    $rs\->add_where(\*(Aquser.id\*(Aq => {\*(Aq!=\*(Aq => 1});
.Ve
.PP
\&\s-1IS\s0 \s-1NULL/\s0 \s-1IS\s0 \s-1NOT\s0 NULLXXXXXXXXXscalarXXXXXXXXXXXX
.PP
.Vb 2
\&    $rs\->add_where(\*(Aquser.id\*(Aq => \e\*(AqIS NULL\*(Aq);
\&    $rs\->add_where(\*(Aquser.id\*(Aq => \e\*(AqIS NOT NULL\*(Aq);
.Ve
.PP
XXXXXorXXXXXXXXXXXXXXXXXX
.PP
.Vb 1
\&    $rs\->add_where(\*(Aquser.id\*(Aq => [{\*(Aq>\*(Aq => 10}, {\*(Aq<\*(Aq => 100}]);
.Ve
.PP
XXXXXXXXXXXandXXXXXXXX
.PP
.Vb 1
\&    $rs\->add_where(\*(Aquser.id\*(Aq => [\*(Aq\-and\*(Aq => {\*(Aq>\*(Aq => 10}, {\*(Aq<\*(Aq => 100}]);
.Ve
.PP
\&\s-1XXXXXXXXXXX\s0
.PP
\&\s-1XXXXXXXXXXXX\s0
.PP
.Vb 1
\&    $rs\->add_where(\*(Aquser.id\*(Aq => [\*(Aq\-and\*(Aq => 1,2,3]);
.Ve
.PP
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.PP
\&\s-1XXXXJOINXXXX\s0
.PP
.Vb 10
\&    $rs\->from([]);
\&    $rs\->add_join(
\&        user => [
\&            {
\&                type  => \*(Aqinner\*(Aq,
\&                table => \*(Aqbookmark\*(Aq,
\&                condition => \*(Aquser.id = bookmark.user_id\*(Aq,
\&            },
\&        ],
\&    );
\&
\&    FROM user INNER JOIN bookmark ON user.id = bookmark.user_id
.Ve
.PP
\&\s-1XXXXXJOINXXXXXXXXXXX\s0
.PP
XXX$rs\->from([]);XXXXXXXfrom \s-1XXXXXXXXX\s0
add_joinXXXXXXXXXXXXXXXXXXXXXX
.PP
XXXtypeXjoinXXXXX
.PP
tableXjoinXXXXXXX
.PP
conditionXJOINXXXXXXXXXX
